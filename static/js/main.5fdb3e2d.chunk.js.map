{"version":3,"sources":["Models/Reponse.ts","App.tsx","index.tsx"],"names":["RedBowlResponse","date","firstname","lastname","email","this","CenteredCol","styled","Col","App","useState","doc","setDoc","responses","setResponses","winnerIndex","setWinnerIndex","year","getFullYear","toString","month","getMonth","length","day","getDate","dateToString","Date","filterDate","setFilterDate","loading","setLoading","useEffect","GoogleSpreadsheet","useApiKey","loadInfo","then","response","sheet","sheetsByIndex","getRows","rows","parsedResponses","map","r","_rawData","catch","error","console","log","cleanResponses","dateMoment","moment","dayOfWeek","minHour","timeFilteredResponses","filter","responseMoment","responseHour","hour","isSame","dedupedResponses","find","push","cleaned","responseList","winner","winnerName","winnerEmail","topContentIfLoaded","onClick","randomIndex","random","int","style","width","height","topContent","className","type","value","onChange","event","target","span","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fdb3e2d.chunk.js","sourcesContent":["export class RedBowlResponse {\r\n\r\n    constructor(date: Date, firstname: string, lastname: string, email: string) {\r\n        this.date = date;\r\n        this.firstname = firstname;\r\n        this.lastname = lastname;\r\n        this.email = email;\r\n    }\r\n\r\n    date: Date;\r\n    firstname: string;\r\n    lastname: string;\r\n    email: string;\r\n};","import { Col, Row } from 'antd';\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport moment from 'moment';\r\nimport random from 'random';\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { RedBowlResponse } from './Models/Reponse';\r\n\r\nconst debug = false;\r\n\r\nconst CenteredCol = styled(Col)`\r\n\ttext-align: center;\r\n`;\r\n\r\nconst dateToString = (date: Date): string => {\r\n\r\n\tconst year = date.getFullYear().toString();\r\n\tlet month = (date.getMonth() + 1).toString();\r\n\tif (month.length === 1) {\r\n\t\tmonth = `0${month}`;\r\n\t}\r\n\tlet day = date.getDate().toString();\r\n\tif (day.length === 1) {\r\n\t\tday = `0${day}`;\r\n\t}\r\n\r\n\treturn `${year}-${month}-${day}`;\r\n}\r\n\r\nfunction App() {\r\n\r\n\tconst [doc, setDoc] = useState<GoogleSpreadsheet>();\r\n\tconst [responses, setResponses] = useState<RedBowlResponse[]>([]);\r\n\tconst [winnerIndex, setWinnerIndex] = useState<number>(-1);\r\n\tconst [filterDate, setFilterDate] = useState<string>(dateToString(new Date()))\r\n\tconst [loading, setLoading] = useState<boolean>(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetDoc(new GoogleSpreadsheet('1OEry52CfvOobIL9hjQGPOCl0ncIMF_KHrtY4glougLE'));\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (doc) {\r\n\t\t\tdoc.useApiKey(\"AIzaSyCOrD6IBVG0UHiFANoaHMStiZXN8bYsqV8\");\r\n\r\n\t\t\tdoc.loadInfo()\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconst sheet = doc?.sheetsByIndex[0];\r\n\t\t\t\t\tsheet?.getRows()\r\n\t\t\t\t\t\t.then((rows) => {\r\n\t\t\t\t\t\t\tconst parsedResponses = rows.map((r) => {\r\n\t\t\t\t\t\t\t\tconst date = r._rawData[0];\r\n\t\t\t\t\t\t\t\tconst firstname = r._rawData[1];\r\n\t\t\t\t\t\t\t\tconst lastname = r._rawData[2];\r\n\t\t\t\t\t\t\t\tconst email = r._rawData[3];\r\n\t\t\t\t\t\t\t\tconst returnResponse = new RedBowlResponse(date, firstname, lastname, email);\r\n\r\n\t\t\t\t\t\t\t\treturn returnResponse;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tsetResponses(parsedResponses);\r\n\t\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [doc]);\r\n\r\n\tconst cleanResponses = (responses: RedBowlResponse[]): RedBowlResponse[] => {\r\n\r\n\t\t//Filter responses to those submitted after 2 hours before curtain\r\n\t\tconst dateMoment = moment(filterDate);\r\n\r\n\t\tconst dayOfWeek = dateMoment.day();\r\n\t\tlet minHour: number = 23;\r\n\r\n\t\tif (debug) {\r\n\t\t\tminHour = 0;\r\n\t\t} else if (dayOfWeek === 5 || dayOfWeek === 6) {\r\n\t\t\tminHour = 17;\r\n\t\t} else if (dayOfWeek === 0) {\r\n\t\t\tminHour = 12;\r\n\t\t}\r\n\r\n\t\tconst timeFilteredResponses = responses.filter((r) => {\r\n\t\t\tconst responseMoment = moment(r.date);\r\n\t\t\tconst responseHour = responseMoment.hour();\r\n\r\n\t\t\tconst isSameDay = responseMoment.isSame(dateMoment, 'day');\r\n\t\t\tconst isAfterMinHour = responseHour >= minHour\r\n\r\n\t\t\treturn isSameDay && isAfterMinHour;\r\n\t\t});\r\n\r\n\t\tconst dedupedResponses: RedBowlResponse[] = [];\r\n\r\n\t\tfor (const response of timeFilteredResponses) {\r\n\t\t\tconst existingResponse = dedupedResponses.find((r) => {\r\n\t\t\t\treturn r.email === response.email;\r\n\t\t\t});\r\n\r\n\t\t\tif (!existingResponse) {\r\n\t\t\t\tdedupedResponses.push(response);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dedupedResponses;\r\n\t};\r\n\r\n\tconst generateRandomNumber = () => {\r\n\t\tconst cleaned = cleanResponses(responses);\r\n\t\tconst randomIndex = random.int(0, cleaned?.length - 1);\r\n\t\tconsole.log(randomIndex);\r\n\t\tsetWinnerIndex(randomIndex);\r\n\t}\r\n\r\n\tconst onDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetFilterDate(event.target.value);\r\n\t}\r\n\r\n\tconst cleaned = cleanResponses(responses);\r\n\tconst responseList = cleaned?.map((response) => {\r\n\t\treturn <li key={response.email}>\r\n\t\t\t{response.email};\r\n\t\t</li>\r\n\t});\r\n\r\n\tconst winner = winnerIndex !== -1 ? cleaned[winnerIndex] : null;\r\n\tconst winnerName = `${winner?.firstname} ${winner?.lastname}`;\r\n\tconst winnerEmail = `${winner?.email}`;\r\n\r\n\tconst topContentIfLoaded = responses?.length > 0\r\n\t\t? <button\r\n\t\t\tonClick={generateRandomNumber}\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: \"50%\",\r\n\t\t\t\theight: \"5em\"\r\n\t\t\t}}>\r\n\t\t\tRandomly select winner\r\n\t\t\t</button>\r\n\t\t: <h1>No entries yet!</h1>\r\n\r\n\tconst topContent = loading\r\n\t\t? <h2>Loading, please wait</h2>\r\n\t\t: topContentIfLoaded;\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Row>\r\n\t\t\t\t<CenteredCol>\r\n\t\t\t\t\t<h3>Date Override</h3>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"date\"\r\n\t\t\t\t\t\t\tstyle={{ width: \"200px\" }}\r\n\t\t\t\t\t\t\tvalue={filterDate}\r\n\t\t\t\t\t\t\tonChange={onDateChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</CenteredCol>\r\n\t\t\t</Row>\r\n\t\t\t<Row>\r\n\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t{topContent}\r\n\t\t\t\t</CenteredCol>\r\n\t\t\t</Row>\r\n\t\t\t{\r\n\t\t\t\twinner &&\r\n\t\t\t\t<div style={{ color: \"red\" }}>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t\t\t<h1>Winner:</h1>\r\n\t\t\t\t\t\t</CenteredCol>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t\t\t<h3>{`${winnerName}, ${winnerEmail}`}</h3>\r\n\t\t\t\t\t\t</CenteredCol>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col span={24}>\r\n\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t{responseList}\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}