{"version":3,"sources":["Models/Reponse.ts","App.tsx","index.tsx"],"names":["RedBowlResponse","date","firstname","lastname","email","this","CenteredCol","styled","Col","App","useState","doc","setDoc","responses","setResponses","winnerIndex","setWinnerIndex","loading","setLoading","useEffect","GoogleSpreadsheet","useApiKey","loadInfo","then","response","sheet","sheetsByIndex","getRows","rows","cleaned","todayMoment","moment","Date","dayOfWeek","day","minHour","timeFilteredResponses","filter","r","responseMoment","responseHour","hour","isSame","dedupedResponses","find","push","cleanResponses","map","_rawData","catch","error","console","log","responseList","winner","winnerName","winnerEmail","topContentIfLoaded","length","onClick","randomIndex","random","int","style","width","height","topContent","className","textAlign","span","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa96728c.chunk.js","sourcesContent":["export class RedBowlResponse {\r\n\r\n    constructor(date: Date, firstname: string, lastname: string, email: string) {\r\n        this.date = date;\r\n        this.firstname = firstname;\r\n        this.lastname = lastname;\r\n        this.email = email;\r\n    }\r\n\r\n    date: Date;\r\n    firstname: string;\r\n    lastname: string;\r\n    email: string;\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport { RedBowlResponse } from './Models/Reponse';\r\nimport { Col, Row } from 'antd';\r\nimport styled from 'styled-components';\r\nimport random from 'random';\r\nimport moment from 'moment';\r\n\r\nconst debug = false;\r\n\r\nconst cleanResponses = (responses: RedBowlResponse[]): RedBowlResponse[] => {\r\n\r\n\t//Filter responses to those submitted after 1 hour before curtain\r\n\tconst todayMoment = moment(new Date());\r\n\tconst dayOfWeek = todayMoment.day();\r\n\tlet minHour: number = 23;\r\n\r\n\tif (debug) {\r\n\t\tminHour = 0;\r\n\t} else if (dayOfWeek === 5 || dayOfWeek === 6) {\r\n\t\tminHour = 18;\r\n\t} else if (dayOfWeek === 0) {\r\n\t\tminHour = 13;\r\n\t}\r\n\r\n\tconst timeFilteredResponses = responses.filter((r) => {\r\n\t\tconst responseMoment = moment(r.date);\r\n\t\tconst responseHour = responseMoment.hour();\r\n\r\n\t\tconst isSameDay = responseMoment.isSame(todayMoment, 'day');\r\n\t\tconst isAfterMinHour = responseHour >= minHour\r\n\r\n\t\treturn isSameDay && isAfterMinHour;\r\n\t});\r\n\r\n\tconst dedupedResponses: RedBowlResponse[] = [];\r\n\r\n\tfor (const response of timeFilteredResponses) {\r\n\t\tconst existingResponse = dedupedResponses.find((r) => {\r\n\t\t\treturn r.email === response.email;\r\n\t\t});\r\n\r\n\t\tif (!existingResponse) {\r\n\t\t\tdedupedResponses.push(response);\r\n\t\t}\r\n\t}\r\n\r\n\treturn dedupedResponses;\r\n};\r\n\r\nconst CenteredCol = styled(Col)`\r\n\ttext-align: center;\r\n`;\r\n\r\nfunction App() {\r\n\r\n\tconst [doc, setDoc] = useState<GoogleSpreadsheet>();\r\n\tconst [responses, setResponses] = useState<RedBowlResponse[]>([]);\r\n\tconst [winnerIndex, setWinnerIndex] = useState<number>(-1);\r\n\tconst [loading, setLoading] = useState<boolean>(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetDoc(new GoogleSpreadsheet('1OEry52CfvOobIL9hjQGPOCl0ncIMF_KHrtY4glougLE'));\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (doc) {\r\n\t\t\tdoc.useApiKey(\"AIzaSyCOrD6IBVG0UHiFANoaHMStiZXN8bYsqV8\");\r\n\r\n\t\t\tdoc.loadInfo()\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconst sheet = doc?.sheetsByIndex[0];\r\n\t\t\t\t\tsheet?.getRows()\r\n\t\t\t\t\t\t.then((rows) => {\r\n\t\t\t\t\t\t\tconst parsedResponses = rows.map((r) => {\r\n\t\t\t\t\t\t\t\tconst date = r._rawData[0];\r\n\t\t\t\t\t\t\t\tconst firstname = r._rawData[1];\r\n\t\t\t\t\t\t\t\tconst lastname = r._rawData[2];\r\n\t\t\t\t\t\t\t\tconst email = r._rawData[3];\r\n\t\t\t\t\t\t\t\tconst returnResponse = new RedBowlResponse(date, firstname, lastname, email);\r\n\r\n\t\t\t\t\t\t\t\treturn returnResponse;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tconst cleaned = cleanResponses(parsedResponses);\r\n\t\t\t\t\t\t\tsetResponses(cleaned);\r\n\t\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [doc]);\r\n\r\n\tconst generateRandomNumber = () => {\r\n\t\tconst randomIndex = random.int(0, responses?.length - 1);\r\n\t\tconsole.log(randomIndex);\r\n\t\tsetWinnerIndex(randomIndex);\r\n\t}\r\n\r\n\tconst responseList = responses?.map((response) => {\r\n\t\treturn (\r\n\t\t\t<li key={response.email}>\r\n\t\t\t\t{response.email};\r\n\t\t\t</li>\r\n\t\t)\r\n\t});\r\n\r\n\tconst winner = winnerIndex !== -1 ? responses[winnerIndex] : null;\r\n\tconst winnerName = `${winner?.firstname} ${winner?.lastname}`;\r\n\tconst winnerEmail = `${winner?.email}`;\r\n\r\n\tconst topContentIfLoaded = responses?.length > 0\r\n\t\t? <button\r\n\t\t\tonClick={generateRandomNumber}\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: \"50%\",\r\n\t\t\t\theight: \"5em\"\r\n\t\t\t}}>\r\n\t\t\tRandomly select winner\r\n\t\t\t</button>\r\n\t\t: <h1>No entries yet!</h1>\r\n\r\n\tconst topContent = loading\r\n\t\t? <h2>Loading, please wait</h2>\r\n\t\t: topContentIfLoaded;\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<h1 style={{ textAlign: \"center\" }}>\r\n\t\t\t\t\t\tTOTS Red Bowl\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row>\r\n\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t{topContent}\r\n\t\t\t\t</CenteredCol>\r\n\t\t\t</Row>\r\n\t\t\t{\r\n\t\t\t\twinner &&\r\n\t\t\t\t<div style={{ color: \"red\" }}>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t\t\t<h1>Winner:</h1>\r\n\t\t\t\t\t\t</CenteredCol>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<CenteredCol span={24}>\r\n\t\t\t\t\t\t\t<h3>{`${winnerName}, ${winnerEmail}`}</h3>\r\n\t\t\t\t\t\t</CenteredCol>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<Row>\r\n\t\t\t\t<Col span={24}>\r\n\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t{responseList}\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);"],"sourceRoot":""}